#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

#define VCS_RTLIB_TLS_MODEL  __attribute__((tls_model("initial-exec")))

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long long InstNumType;
typedef long long InstNumSigned;
typedef InstNumType  InstNum;
typedef unsigned long RP;
typedef unsigned long RO;
typedef unsigned long long ULL;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef struct {
    U  I728;
    RP  I729;
} RmaReceiveClock1;
typedef NodeCount  FlatNodeNum;
typedef unsigned ProcessNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp64  RmaTimeStamp64;
typedef TimeStamp  RmaTimeStamp;
typedef struct {
    int * I730;
    int * I731;
    int I732;
    union {
        long long enumDesc;
        long long classId;
    } I733;
} TypeData;
struct etype {
    U  I607 :8;
    U  I608;
    U  I609;
    U  I610 :1;
    U  I611 :1;
    U  I612 :1;
    U  I613 :1;
    U  I614 :1;
    U  I615 :1;
    U  I616 :1;
    U  I617 :1;
    U  I618 :1;
    U  I619 :4;
    U  I620 :1;
    U  I621 :1;
    U  I622 :1;
    U  I623 :1;
    U  I624 :1;
    U  I625 :1;
    U  I626 :1;
    U  I627 :1;
    U  I628 :2;
    U  I629 :1;
    U  I630 :2;
    U  I631 :1;
    U  I632 :1;
    U  I633 :1;
    U  I634 :1;
    U  I635 :1;
    U  I636 :1;
    TypeData  * I637;
    U  I638;
    U  I639;
    U  I640 :1;
    U  I641 :1;
    U  I642 :1;
    U  I643 :1;
    U  I644 :2;
    U  I645 :2;
    U  I646 :1;
    U  I647 :1;
    U  I648 :1;
    U  I649 :1;
    U  I650 :1;
    U  I651 :1;
    U  I652 :1;
    U  I653 :1;
    U  I654 :1;
    U  I655 :1;
    U  I656 :1;
    U  I657 :1;
    U  I658 :12;
};
typedef union {
    double I740;
    unsigned long long I741;
    unsigned  I742[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    E_fn  I749;
    struct iptmpl * I750;
    struct eblk * I752;
    unsigned I753;
    unsigned I754;
    struct eblk * I755;
} eblk_struct;
typedef struct {
    RP  I749;
    RP  I750;
    RP  I752;
    unsigned I753;
    unsigned I754;
    RP  I755;
} RmaEblk;
typedef struct {
    RP  I749;
    RP  I750;
    RP  I752;
    unsigned I753;
    unsigned I754;
    RP  I755;
    unsigned val;
} RmaEblklq;
typedef struct _DEblkLaneT {
    struct _DEblkLaneT * I762;
    struct eblk * I764;
} DEblkLaneT;
typedef struct _DEblkPoolT {
    struct _DEblkLaneT * I765;
    struct _DEblkLaneT * I766;
    unsigned I767;
    unsigned I768;
} DEblkPoolT;
typedef union {
    double I740;
    unsigned long long I741;
    unsigned  I742[2];
} clock_struct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I799;
    RmaEblk  I748;
    U  I801;
    US  I802 :1;
    US  I803 :4;
    US  I185 :2;
    US  state :2;
    US  I805 :1;
    US  I806 :2;
    US  I807 :2;
    US  fHsim :1;
    US  I589 :1;
    scalar  newval;
    scalar  I810;
    RP  I811;
};
struct retain_t {
    struct retain_t * I799;
    EBLK  I748;
    U  I801;
    US  I802 :1;
    US  I803 :4;
    US  I185 :2;
    US  state :2;
    US  I805 :1;
    US  I806 :2;
    US  I807 :2;
    US  fHsim :1;
    US  I808 :1;
    scalar  newval;
    scalar  I810;
    void * I811;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I790;
    scalar  I791;
    scalar  I792;
    scalar  I793;
    scalar  fHsim :1;
    scalar  I185 :6;
    U  I795;
    EBLK  I796;
    void * I797;
    UP   I798[1];
};
struct RmaMPSched {
    RP  I790;
    scalar  I791;
    scalar  I792;
    scalar  I793;
    scalar  fHsim :1;
    scalar  I185 :6;
    U  I795;
    RmaEblk  I796;
    RP  I797;
    RP   I798[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I790;
    scalar  I791;
    scalar  I792;
    scalar  I793;
    scalar  I185;
    U  I795;
    RmaEblk  I796;
    scalar  I807;
    scalar  I816;
    scalar  I817;
    scalar  I818;
    U  I819;
    U  I820;
    U  I821;
    U  state;
    U  I822;
    RP  I750;
    RP  I823;
    RP  I824;
    RP   I798[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I826;
    void * I827;
};
typedef struct {
    RmaEblk  I748;
    RP  I828;
    scalar  I829;
    scalar  I807;
    scalar  I830;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I790;
    scalar  I791;
    scalar  I792;
    scalar  I793;
    scalar  fHsim :1;
    scalar  I185 :6;
    U  I795;
    RmaEblk  I796;
    scalar  I807;
    scalar  I816;
    scalar  I817;
    scalar  I818;
    U  state :4;
    U  I832 :28;
    U  I820;
    U  I821;
    RP  I833;
    RP  I750;
    RP  I834;
    RP   I798[1];
};
typedef struct red_t {
    U  I835;
    U  I836;
    U  I707;
} RED;
typedef struct predd {
    PD_e  I185;
    RED   I837[0];
} PREDD;
union rhs_value {
    vec32  I838;
    scalar  I829;
    vec32  * I807;
    double I839;
    U  I840;
};
typedef struct nbs_t {
    struct nbs_t * I841;
    struct nbs_t * I843;
    void (* I844)(struct nbs_t * I811);
    U  I845 :1;
    U  I846 :1;
    U  I847 :1;
    U  I848 :1;
    U  I849 :1;
    U  I850 :1;
    U  I851 :26;
    U  I852;
    void * I853;
    union rhs_value I854;
    vec32  I740;
    union {
        struct nbs_t * first;
        struct nbs_t * last;
    } I856;
} NBS;
typedef struct {
    RP  I857;
    RP  I823;
    RP  I750;
    RP  I824;
    RmaEblk  I748;
    RmaEblk  I858;
    RP  I859;
    scalar  I829;
    scalar  I807;
    char state;
    uscope_t  I860;
    U  I861;
    RP  I862;
    scalar  I816;
    scalar  I817;
    scalar  I818;
    U  I820;
    U  I821;
    RP  I797;
} RmaPulse;
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I866 :1;
    U  I867 :1;
    U  I868 :1;
    U  I869 :1;
    U  I870 :1;
    U  I871 :1;
    U  I872 :1;
    U  I873 :1;
    U  I874 :1;
    U  I875 :1;
    U  I876 :1;
    U  I877 :1;
    U  I878 :1;
    U  I879 :1;
    U  I880 :1;
    U  I881 :1;
    U  I882 :1;
    U  I883 :1;
    U  I884 :1;
    QIRDModuleType  I885 :2;
    U  I886 :1;
    U  I887 :1;
    U  I888 :1;
    U  I889 :1;
    U  I890 :1;
    U  I891 :1;
    U  I892 :1;
    U  I893 :1;
    U  I894 :1;
    U  I895 :1;
    U  I896 :1;
    U  I897 :1;
    U  I898 :1;
    U  I899 :1;
    U  I900 :1;
    U  I901 :1;
    U  I902 :1;
    U  I903 :1;
    U  I904 :1;
    U  I905 :1;
    U  I906 :1;
    U  I907 :1;
    U  I908 :1;
} BitFlags;
typedef struct qird_dbg_flags_s {
    U  I909 :29;
    U  I910 :1;
    U  I911 :1;
    U  I912 :1;
} qird_dbg_flags_t;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    U  I20;
    U  I21;
    U  * I22;
    U  * I23;
    void * I24;
    void * I25;
    U  I26;
    int I27;
    UP  I28;
    U  I29;
    U  I30;
    U  I31;
    UP  I32;
    U  * I33;
    U  * I34;
    UP  I35;
    U  I36;
    BitFlags  I37;
    U  I38;
    U  I39;
    U  I40;
    U  I41;
    U  I42;
    U  * I43;
    U  I44;
    U  * I45;
    U  I46;
    U  I47;
    U  I48;
    U  I49;
    U  I50;
    U  I51;
    U  I52;
    U  * I53;
    U  * I54;
    U  I55;
    U  I56;
    U  * I57;
    U  I58;
    U  * I59;
    U  I60;
    U  I61;
    U  I62;
    U  I63;
    U  * I64;
    U  I65;
    U  * I66;
    U  I67;
    U  I68;
    U  I69;
    U  I70;
    U  I71;
    U  I72;
    U  * I73;
    char * I74;
    U  I75;
    U  I76;
    U  I77;
    U  I78;
    U  I79;
    U  * I80;
    U  I81;
    U  I82;
    U  I83;
    UP  * I84;
    U  I85;
    U  I86;
    U  I87;
    U  I88;
    U  I89;
    U  I90;
    U  * I91;
    U  I92;
    U  I93;
    U  * I94;
    U  * I95;
    U  * I96;
    U  * I97;
    U  * I98;
    U  I99;
    U  I100;
    struct taskInfo * I101;
    U  I103;
    U  I104;
    U  I105;
    int * I106;
    U  * I107;
    UP  * I108;
    U  * I109;
    U  I110;
    U  I111;
    int * I112;
    U  I113;
    U  I114;
    U  I115;
    U  I116;
    U  I117;
    struct qrefer * I118;
    U  * I120;
    unsigned * I121;
    void * I122;
    U  I123;
    U  I124;
    struct classStaticReferData * I125;
    U  I127;
    U  * I128;
    U  I129;
    U  * I130;
    U  I131;
    struct wakeupInfoStruct * I132;
    U  I134;
    U  I135;
    U  I136;
    U  * I137;
    U  I138;
    U  * I139;
    U  I140;
    U  I141;
    U  I142;
    U  * I143;
    U  I144;
    U  * I145;
    U  I146;
    U  I147;
    U  * I148;
    U  I149;
    U  I150;
    U  * I151;
    U  * I152;
    U  * I153;
    U  I154;
    U  I155;
    U  I156;
    U  I157;
    U  I158;
    struct qrefee * I159;
    U  * I161;
    U  I162;
    struct qdefrefee * I163;
    U  * I165;
    int (* I166)(void);
    char * I167;
    U  I168;
    U  I169;
    void * I170;
    void * I171;
    NumLibs_t  I172;
    char * I173;
    U  * I174;
    U  I175;
    U  I176;
    U  I177;
    U  I178;
    U  I179;
    U  * I180;
    U  * I181;
    int I182;
    struct clock_load * I183;
    int I198;
    struct clock_data * I199;
    int I215;
    struct clock_hiconn * I216;
    U  I220;
    U  I221;
    U  I222;
    U  I223;
    U  * I224;
    U  I225;
    U  I226;
    U  * I227;
    U  I228;
    void * I229;
    U  I230;
    U  I231;
    UP  * I232;
    void * I233;
    U  I234;
    UP  * I235;
    U  * I236;
    int (* I237)(void);
    U  * I238;
    UP  * I239;
    U  * I240;
    U  I241 :1;
    U  I242 :31;
    U  I243;
    U  I244;
    UP  * I245;
    U  * I246;
    U  I247 :1;
    U  I248 :1;
    U  I249 :1;
    U  I250 :1;
    U  I251 :28;
    U  I252;
    U  I253;
    U  I254;
    U  I255 :31;
    U  I256 :1;
    UP  * I257;
    UP  * I258;
    U  I259;
    U  I260;
    U  * I261;
    U  * I262;
    UP  * I263;
    UP  * I264;
    U  * I265;
    U  * I266;
    U  * I267;
    U  * I268;
    U  * I269;
    U  * I270;
    U  * I271;
    UP  * I272;
    UP  * I273;
    UP  * I274;
    U  * I275;
    UP  * I276;
    UP  * I277;
    UP  * I278;
    UP  * I279;
    char * I280;
    U  I281;
    U  I282;
    U  I283;
    U  I284;
    U  I285;
    U  * I286;
    U  * I287;
    U  I288;
    UP  * I289;
    UP  * I290;
    UP  * I291;
    UP  * I292;
    UP  * I293;
    UP  * I294;
    UP  * I295;
    U  * I296;
    UP  * I297;
    U  I298;
    UP  * I299;
    char * I300;
    UP  * I301;
    UP  * I302;
    UP  * I303;
    UP  * I304;
    UP  * I305;
    UP  * I306;
    UP  * I307;
    UP  * I308;
    UP  * I309;
    UP  * I310;
    UP  * I311;
    UP  * I312;
    U  I313;
    U  I314;
    U  I315;
    U  I316;
    U  I317;
    U  I318;
    U  I319;
    U  I320;
    char * I321;
    U  * I322;
    U  I323;
    U  I324;
    U  I325;
    UP  * I326;
    UP  * I327;
    UP  * I328;
    UP  * I329;
    struct daidirInfo * I330;
    struct vcs_tftable * I332;
    U  I334;
    UP  * I335;
    UP  * I336;
    U  I337;
    U  I338;
    U  I339;
    UP  * I340;
    U  * I341;
    UP  * I342;
    UP  * I343;
    struct qird_hil_data * I344;
    UP  (* I346)(void);
    UP  (* I347)(void);
    UP  (* I348)(void);
    UP  (* I349)(void);
    UP  (* I350)(void);
    int * I351;
    int (* I352)(void);
    char * I353;
    UP  * I354;
    UP  * I355;
    UP  (* I356)(void);
    int (* I357)(void);
    int * I358;
    int (* I359)(void);
    int * I360;
    char * I361;
    U  * I362;
    U  * I363;
    U  * I364;
    U  * I365;
    void * I366;
    U  I367;
    void * I368;
    U  I369;
    U  I370;
    U  I371;
    U  I372;
    U  I373;
    U  I374;
    char * I375;
    UP  * I376;
    U  * I377;
    U  * I378;
    U  I379 :15;
    U  I380 :14;
    U  I381 :1;
    U  I382 :1;
    U  I383 :1;
    U  I384 :3;
    U  I385 :1;
    U  I386 :1;
    U  I387 :17;
    U  I388 :3;
    U  I389 :5;
    U  I390 :1;
    U  I391 :1;
    U  I392;
    qird_dbg_flags_t  I393;
    struct scope * I394;
    U  I396;
    U  I397;
    U  I398;
    U  * I399;
    U  * I400;
    U  * I401;
    U  I402;
    U  I403;
    U  I404;
    struct pcbt * I405;
    U  I415;
    U  I416;
    U  I417;
    U  I418;
    void * I419;
    void * I420;
    void * I421;
    int I422;
    U  * I423;
    U  I424;
    U  I425;
    U  I426;
    U  I427;
    U  I428;
    U  I429;
    U  I430;
    void * I431;
    UP  * I432;
    U  I433;
    U  I434;
    void * I435;
    U  I436;
    void * I437;
    U  I438;
    void * I439;
    U  I440;
    int (* I441)(void);
    int (* I442)(void);
    void * I443;
    void * I444;
    void * I445;
    U  I446;
    U  I447;
    U  I448;
    U  I449;
    U  I450;
    U  I451;
    char * I452;
    U  I453;
    U  * I454;
    U  I455;
    U  * I456;
    U  I457;
    U  I458;
    U  I459;
    U  I460;
    U  I461;
    U  I462;
    U  * I463;
    U  I464;
    U  I465;
    U  * I466;
    U  I467;
    U  I468;
    U  I469;
    U  * I470;
    char * I471;
    U  I472;
    U  I473;
    U  I474;
    U  I475;
    U  * I476;
    U  * I477;
    U  I478;
    U  * I479;
    U  * I480;
    U  I481;
    U  I482;
    U  I483;
    UP  * I484;
    U  I485;
    U  I486;
    U  I487;
    struct cosim_info * I488;
    U  I490;
    U  * I491;
    U  I492;
    void * I493;
    U  I494;
    U  * I495;
    U  I496;
    struct hybridSimReferrerData * I497;
    U  I499;
    struct hybridSimReferrerData * I500;
    U  I501;
    U  * I502;
    U  I503;
    U  I504;
    U  * I505;
    U  I506;
    U  * I507;
    U  I508;
    U  * I509;
    U  I510;
    U  I511;
    U  * I512;
    U  I513;
    U  * I514;
    U  I515;
    U  I516;
    UP  * I517;
    struct mhdl_outInfo * I518;
    UP  * I520;
    U  I521;
    UP  * I522;
    U  I523;
    void * I524;
    U  * I525;
    void * I526;
    char * I527;
    int (* I528)(void);
    U  * I529;
    char * I530;
    char * I531;
    U  I532;
    U  * I533;
    char * I534;
    U  I535;
    struct regInitInfo * I536;
    UP  * I538;
    U  * I539;
    char * I540;
    U  I541;
    U  I542;
    U  I543;
    U  I544;
    U  I545;
    U  I546;
    U  I547;
    U  I548;
    UP  * I549;
    U  I550;
    U  I551;
    U  I552;
    U  I553;
    UP  * I554;
    U  I555;
    UP  * I556;
    U  I557;
    U  I558;
    U  I559;
    U  * I560;
    U  I561;
    U  I562;
    U  I563;
    U  * I564;
    U  * I565;
    UP  * I566;
    UP  * I567;
    void * I568;
    UP  I569;
    void * I570;
    void * I571;
    void * I572;
    void * I573;
    void * I574;
    UP  I575;
    U  * I576;
    U  * I577;
    void * I578;
    U  I579 :1;
    U  I580 :31;
    U  I581;
    U  I582;
    U  I583;
    int I584;
    U  I585 :1;
    U  I586 :1;
    U  I587 :1;
    U  I588 :1;
    U  I589 :28;
    void * I590;
    void * I591;
    void * I592;
    void * I593;
    void * I594;
    UP  * I595;
    U  * I596;
    U  I597;
    char * I598;
    U  * I599;
    U  * I600;
    U  * I601;
    char * I602;
    int * I603;
    UP  * I604;
    struct etype * I605;
    U  I659;
    U  I660;
    U  * I661;
    struct etype * I662;
    U  I663;
    U  I664;
    U  I665;
    U  * I666;
    void * I667;
    U  I668;
    U  I669;
    void * I670;
    U  I671;
    U  I672;
    U  * I673;
    U  * I674;
    char * I675;
    U  I676;
    struct covreg_rt * I677;
    U  I679;
    U  I680;
    U  * I681;
    U  I682;
    U  * I683;
    U  I684;
    U  I685;
    U  * I686;
};
typedef struct pcbt {
    U  * I407;
    UP  I408;
    U  I409;
    U  I410;
    U  I411;
    U  I412;
    U  I413;
    U  I414;
} PCBT;
struct iptmpl {
    QIRD  * I756;
    void * I757;
    void * I758;
    UP  I759;
    UP  I760;
    struct iptmpl * I761[2];
};
typedef unsigned long long FileOffset;
typedef struct _RmaMultiInputTable {
    U  I920 :1;
    U  I921 :1;
    U  I694 :2;
    U  I695 :4;
    U  I696 :5;
    U  I922 :1;
    U  I923 :1;
    U  I924 :1;
    U  I925 :1;
    U  I926 :1;
    U  I927 :1;
    U  I928;
    U  I929;
    U  I207;
    U  I930;
    U  I931 :1;
    U  I932 :31;
    union {
        U  utable;
        U  edgeInputNum;
    } I721;
    U  I933 :4;
    U  I934 :4;
    U  I935 :4;
    U  I936 :4;
    U  I937 :4;
    U  I938 :4;
    U  I939 :1;
    U  I940 :1;
    U  I941 :1;
    U  I942 :1;
    U  I943 :5;
    HsimExprChar  * I944;
    UB  * I945;
    UB  * I946;
    struct _RmaMultiInputTable * I919;
    struct _RmaMultiInputTable * I948;
} RmaMultiInputTable;
typedef struct _HsCgPeriod {
    U  I998;
    U  I999;
} HsCgPeriod;
typedef struct {
    U   I1000[2];
    U  I1001 :1;
    U  I1002 :1;
    U  I1003 :8;
    U  I1004 :8;
    U  I1005 :8;
    U  I1006 :4;
    U  I1007 :1;
    U  I1008 :1;
    unsigned long long I1009;
    unsigned long long I1010;
    unsigned long long I1011;
    unsigned long long I1012;
    unsigned long long I999;
    U  I998;
    U  I1013;
    U  I1014;
    U  I1015;
    U  I1016;
    U  I1017;
    HsCgPeriod  * I1018[10];
} HsimSignalMonitor;
typedef struct {
    InstNum  I1019;
    FlatNodeNum  I1020;
    U  I954;
    scalar  I1021;
    UB  I1022;
    UB  I1023;
    UB  I1024;
    UB  I1025;
    UB  I1026;
    UB  I1027;
    U  I1028;
    U  I1029;
    U  I1030;
    U  I1031;
    U  I1032;
    U  I1033;
    U  I1034;
    U  I1035;
    U  I1036;
    HsimSignalMonitor  * I1037;
    RP  I1038;
    RmaTimeStamp64  I1039;
    U  I1040;
    RmaTimeStamp64  I1041;
    U  I1042;
    UB  I1043 :1;
    UB  I1044 :1;
    UB  I1045 :1;
    RP  I1046;
} HsimNodeRecord;
typedef struct {
    RP  I1054;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RP  I1054;
    RP  I750;
} RmaIbfIp;
typedef struct {
    RP  I1055;
    RP  pfn;
    RP  pcode;
} RmaSeqPrimOutputEblkData;
typedef RP  RCICODE;
typedef struct {
    RmaEblk  I748;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RO  I916;
    RP  pcode;
} SchedGateFanout;
typedef struct {
    RO  I916;
    RP  pcode;
    U   I977[4];
} SchedSelectGateFanout;
typedef struct {
    RP  pcode;
    RmaEblklq  I748;
} SchedGateEblk;
typedef struct {
    RP  pcode;
    RmaEblklq  I748;
    UB  * I1056;
} SchedSelectGateEblk;
typedef struct {
    RmaEblk  I748;
    RP  I1057;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I748;
    RP  I1056;
    RP  I1057;
    vec32  I1058;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I748;
    RP  I1056;
    RP  I1057;
    vec32   I806[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I748;
    RP  I1056;
    RP  I1057;
    scalar   I1059[1];
} RmaAnySchedECg;
typedef struct {
    U  I1060;
    U  I736;
    U  I954;
    U  I1061;
    RmaIbfIp  * I1062;
    EBLK  I748;
    void * val;
} RmaThreadSchedCompiledLoads;
typedef struct {
    U  I736;
    U  I744;
    RmaThreadSchedCompiledLoads  * I1063;
} RmaSchedCompileLoadsCg;
typedef struct {
    RP  I1064;
} RmaRootCbkCg;
typedef struct {
    RP  I1065;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I748;
    RP  I1066;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I744 :31;
    U  I1067 :1;
    vec32  I838;
    U  I1068;
    RP  I1069;
    RP  I1070;
} RmaForceSelectorV;
typedef struct {
    U  I5;
    RmaIbfPcode  I1077;
} RmaNetTypeDriverGate;
typedef struct {
    U  I5;
    U  I690;
    RmaIbfPcode   I1077[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I5;
    RmaIbfPcode  I1077;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I1078;
    U  I1079 :3;
    U  I1080 :1;
    U  I1081 :1;
    U  I929 :16;
} RmaNbaGateOfn;
typedef struct {
    U  I5;
    NBS  I1082;
    RmaIbfPcode  I1078;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct RmaSeqPrimOutputS_ RmaSeqPrimOutputOnClkS;
struct RmaSeqPrimOutputS_ {
    RP  pfn;
    U  state;
    U  I1085;
    RP  I1086;
    scalar  val;
    union {
        U  I728;
        U  I710;
    } I721;
    RP   I1087[1];
};
typedef struct {
    U  I5;
    U  iinput;
    UB  I1089;
    RP  I1090;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    UB  I1089;
    RP  I1090;
} RmaMacroStateUpdate;
typedef struct {
    U  I5;
    U  state;
    U  I1091;
    UB  I1089;
    U  * I1092;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I1093;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I1093;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I748;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I748;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I748;
    RP  pcode;
    RP  pfn;
    scalar  I1094;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I1095;
    RP  I1096;
    RP  I1097;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I748;
    RP  pcode;
    U  I954;
    U   I737[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    U  I1098;
    RP  I837;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaGateDelay;
typedef struct {
    U  I5;
    RP  I837;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaGateBehavioralDelay;
typedef struct {
    U  I5;
    union {
        RP  I1354;
        RP  I1646;
        RP  I1660;
    } I811;
    RmaIbfPcode  I1078;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I1099;
    RmaIbfPcode  I1078;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I1078;
    RmaMps  I1100;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I1101;
    RmaIbfPcode  I1078;
    RmaEblk  I796;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I1078;
    RmaMpspNewCsdf  I1102;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I1102;
    RmaIbfPcode  I1078;
} RmaMPPulseOptHybridDelay;
typedef struct _RmaBehavioralTransportDelay {
    U  I5;
    RP  I707;
    RmaTransEventHdr  I960;
    RP  I834;
    RmaIbfPcode  I1078;
} RmaBehavioralTransportDelayS;
typedef struct {
    U  I5;
    RP  I707;
    RmaTransEventHdr  I960;
    RP  I834;
    RmaIbfPcode  I1078;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    RP  I707;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    RP  I1103;
    RP  I1104;
    RmaTransEventHdr  I960;
    RP  I834;
    RmaIbfPcode  I1078;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    RP  I1103;
    RP  I1104;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I1105;
    RmaTransEventHdr  I960;
    RP  I834;
    RmaIbfPcode  I1078;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I1105;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I837;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1646;
        RP  I1660;
    } I811;
    RmaIbfPcode  I1078;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I837;
    RmaEblk  I748;
    RmaIbfPcode  I1078;
} RmaPortDelay;
typedef struct {
    U  I929;
    RP  I1110;
} RmaRtlXEdgesLoad;
typedef struct {
    U  I5;
    RmaRtlXEdgesLoad   I1110[(5)];
    void * I1111;
} RmaRtlXEdgesHdr;
typedef struct {
    U  I5;
    US  I1112;
    US  I1113 :1;
    US  I943 :15;
    RP  I1114;
    RP  I1115;
    RP  I1116;
} RmaRtlEdgeBlockHdr;
typedef struct {
    RP  I1117;
    RP  I1118;
} RemoteDbsedLoad;
typedef struct {
    RmaEblk  I748;
    RP  I1119;
    RP  I1120;
    US  I1121;
    UB  I1122;
    UB  I1123 :2;
    UB  I1124 :2;
    UB  I1125 :1;
    UB  I943 :3;
    U  I494;
    RP  I1126;
    RP   I841[(5)];
    RP   I843[(5)];
    US  I1127;
    US  I1128;
    RemoteDbsedLoad   I1129[1];
} RmaRtlEdgeBlock;
typedef struct TableAssign_ {
    struct TableAssign_ * I919;
    struct TableAssign_ * I828;
    U  I5;
    U  I1131 :1;
    U  I1132 :1;
    U  I1133 :2;
    U  I1134 :1;
    U  I728 :8;
    U  I1135 :1;
    U  I1136 :1;
    U  I1137 :1;
    U  I1138 :1;
    U  I1139 :1;
    U  I1140 :1;
    U  I1141 :1;
    U  I1142 :1;
    U  I1143 :1;
    U  I1144 :1;
    U  I943 :9;
    RP  ptable;
    RP  I1093;
} TableAssign;
typedef struct TableAssignLayoutOnClk_ {
    struct TableAssignLayoutOnClk_ * I919;
    struct TableAssignLayoutOnClk_ * I828;
    U  I5;
    U  I1131 :1;
    U  I1132 :1;
    U  I1133 :2;
    U  I1134 :1;
    U  I728 :8;
    U  I1135 :1;
    U  I1136 :1;
    U  I1137 :1;
    U  I1138 :1;
    U  I1139 :1;
    U  I1140 :1;
    U  I1141 :1;
    U  I1142 :1;
    U  I1143 :1;
    U  I1144 :1;
    U  I943 :9;
    RP  ptable;
    RmaSeqPrimOutputOnClkS  I1146;
    RmaEblk  I748;
} TableAssignLayoutOnClk;
typedef struct {
    U  state;
    U  I1147;
} RmaSeqPrimOutputOnClkOpt;
typedef struct TableAssignLayoutOnClkOpt_ {
    struct TableAssignLayoutOnClkOpt_ * I919;
    struct TableAssignLayoutOnClkOpt_ * I828;
    U  I1149;
    U  I1131 :1;
    U  I1132 :1;
    U  I1133 :2;
    U  I1134 :1;
    U  I728 :8;
    U  I1135 :1;
    U  I1136 :1;
    U  I1137 :1;
    U  I1138 :1;
    U  I1139 :1;
    U  I1140 :1;
    U  I1141 :1;
    U  I1142 :1;
    U  I1143 :1;
    U  I1144 :1;
    U  I943 :9;
    RmaSeqPrimOutputOnClkOpt  I1146;
    RmaSeqPrimOutputEblkData  I1150;
} TableAssignLayoutOnClkOpt;
typedef struct {
    U  I5;
    RP  I828;
    RP  I1151;
} RmaTableAssignList;
typedef struct {
    U  I5;
    RP  I828;
    RP  I1151;
    RP  I1152;
    RP  I1086;
    RP  I1153;
    US  I728;
    UB  I1021;
    UB  I1154;
    UB  I1155;
    UB  I802;
    RP   I1156[0];
} RmaThreadTableAssignList;
typedef struct {
    RP  I1152;
    RP  I1086;
    RP  I1153;
    US  I728;
    UB  I1021;
    UB  I1154;
    UB  I1155;
    UB  I802;
} RmaThreadTableHeader;
typedef struct {
    RP  I1117;
} RmaWakeupListCg;
typedef struct {
    RP  I1117;
} RmaWakeupArrayCg;
typedef struct {
    RP  I1117;
    RP  I1157;
} RmaPreCheckWakeupListCg;
typedef struct {
    RP  I1117;
    RP  I1157;
} RmaPreCheckWakeupArrayCg;
typedef struct {
    U  I1158;
    U  I728;
    RmaTimeStamp   I1159[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I1160;
} RmaConditionsMdb;
typedef struct {
    RP  I1161;
    RP  I1162;
    U  I1163;
} RmaTcListHeader;
typedef struct {
    RP  I919;
    RP  I1164;
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I919;
    RP  I1164;
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1175;
} RmaTcCoreConditional;
typedef struct {
    RP  I919;
    RP  I1164;
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1175;
    RP  I1176;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I919;
    RP  I1164;
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1176;
    RP  I1177;
    U  I1178;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1087;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1175;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1175;
    RP  I1176;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1176;
    RP  I1177;
    U  I1178;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1176;
    RP  I1177;
    RP  I1087;
    U  I1178;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    RP  I1175;
    RP  I1087;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I1165;
    RP  I743;
    U  I1166;
    scalar  I929;
    scalar  I1167;
    US  I1168 :1;
    US  I1169 :1;
    US  I1170 :1;
    US  I1171 :1;
    US  I1172 :1;
    US  I1173 :1;
    US  I1174 :5;
    U  I1180;
    RP  I1181;
    RP  I1182;
    RP  I1175;
    RP  I1183;
    RP  I1184;
    RmaTimeStamp  I1185;
} RmaTcCoreNochange;
typedef struct {
    RP  I1186;
    RP  I919;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I1160;
    RmaTimeStamp  I1187;
    scalar  I1188;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I919;
    RP  I1160;
    RmaTimeStamp  I1187;
    scalar  I1188;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I1187;
    scalar  I1188;
    US  I929;
    RP  I1176;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I919;
    RmaTimeStamp  I1187;
    scalar  I1188;
    US  I929;
    RP  I1176;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I1176;
    RP  I1189;
    U  I1178;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I1087;
    RP  I1176;
    RP  I1189;
    U  I1178;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I919;
    RP  I1176;
    RP  I1189;
    U  I1178;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I1190;
    U  I1191;
    FlatNodeNum  I1053;
    U  I954;
    U  I1192;
    U  I1193;
    RmaIbfPcode  I1078;
    union {
        scalar  I1194;
        vec32  I1195;
        scalar  * I1196;
        vec32  * I1197;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I919;
    RP  I828;
    RP  I1198;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I1199;
    U  I1200 :1;
    U  I1201 :1;
    U  I1202 :1;
    U  I1203 :4;
    U  I1204 :1;
    U  I1045 :1;
    U  I1205 :23;
    U  I1206 :1;
    U  I1207 :31;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1709;
        RmaSwitchGateInCbkListInfo  I2;
    } I721;
    RmaIbfPcode  I1078;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I1208;
    scalar  val;
    scalar  I1209 :1;
    scalar  I1210 :1;
    scalar  I1211 :3;
    scalar  I1212 :1;
    scalar  I1213 :1;
    scalar  I1214 :1;
    U  I1215;
    U  I1216;
    RP  I841;
    RP  I1217;
    RP  I1053;
    RP  I1218;
    RP  I1219;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I1209;
    UB  I1220;
    UB  I1021;
    RmaNonEdgeLoadData1  * I1110;
    RmaNonEdgeLoadData1  * I828;
    RP  I1221;
    void * I1111;
} RmaNonEdgeLoadHdr1;
typedef struct RmaNonEdgeLoadHdrPrl1_ {
    U  I1222;
    RP  I743;
} RmaNonEdgeLoadHdrPrl1;
typedef struct RmaNonEdgeLoadArrayHdr1_ {
    UB  I1209 :1;
    UB  I1220 :1;
    UB  I1021;
    int I494;
    RmaNonEdgeLoadData1  * I713;
    U  * I1223;
    RP  I1221;
    void * I1111;
} RmaNonEdgeLoadArrayHdr1;
typedef struct RmaNonEdgeLoadDataArray1_ {
    U  I1224;
} RmaNonEdgeLoadDataArray1;
typedef struct RmaChildClockProp_ {
    RP  I841;
    RP  I1225;
    RP  I1053;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I1110;
    RmaChildClockProp  * I828;
} RmaChildClockPropList1;
typedef struct {
    U  I5;
    U  I1226;
} RmaHDLCosimDUTGate;
typedef struct {
    UB  I1227;
    UB  I1228 :1;
    UB  I1229 :1;
    UB  I1230 :1;
    UB  I1231 :1;
    UB  I943 :4;
    US  cedges;
} RmaMasterXpropLoadHdr;
typedef struct {
    UB  I1227;
    UB  I1232;
    UB  I1233;
    UB  I1234 :1;
    UB  I1235 :1;
    UB  I943 :6;
    U  cedges;
} RmaXpropLoadHdr;
typedef struct {
    UB  I1232;
    UB  I1233;
    UB  I1236;
    UB  I1237;
    U  cedges :29;
    U  I1229 :1;
    U  I1238 :1;
    U  I1239 :1;
    U  I1240;
    U  I1241;
    RP  I1242;
    RP  I1243;
    RmaRtlEdgeBlockHdr  * I1244;
} RmaChildXpropLoadHdr;
struct clock_load {
    U  I185 :5;
    U  I186 :12;
    U  I187 :1;
    U  I188 :2;
    U  I189 :1;
    U  I190 :1;
    U  I191 :1;
    U  I192 :9;
    U  I193;
    U  I194;
    void (* pfn)(void * I196, char val);
};
typedef struct clock_data {
    U  I201 :1;
    U  I202 :1;
    U  I203 :1;
    U  I204 :1;
    U  I185 :5;
    U  I186 :12;
    U  I205 :6;
    U  I206 :1;
    U  I188 :2;
    U  I189 :1;
    U  I192 :1;
    U  I207;
    U  I208;
    U  I209;
    U  I193;
    U  I210;
    U  I211;
    U  I212;
    U  I213;
    U  I214;
} HdbsClockData;
struct clock_hiconn {
    U  I218;
    U  I219;
    U  I193;
    U  I188;
};
typedef union _RmaCbkMemOptUnion {
    RP  I1245;
    RP  I1246;
    RP  I1247;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I1248;
} RmaDaiOptCg;
struct futq_slot2 {
    U  I788;
    U   I789[32];
};
struct futq_slot1 {
    U  I785;
    struct futq_slot2  I786[32];
};
struct futq_info {
    scalar  * I780;
    U  I781;
    U  I782;
    struct futq_slot1  I783[32];
};
struct futq {
    struct futq * I769;
    struct futq * I771;
    RmaEblk  * I772;
    RmaEblk  * I773;
    U  I753;
    U  I1;
    DEblkPoolT  * I774;
};
struct sched_table {
    struct futq * I775;
    struct futq I776;
    struct hash_bucket * I777;
    struct hash_bucket * I779;
};
struct dummyq_struct {
    clock_struct  I1249;
    EBLK  * I1250;
    EBLK  * I1251;
    EBLK  * I1252;
    struct futq * I1253;
    struct futq * I1254;
    struct futq * I1255;
    struct sched_table * I1256;
    struct futq_info * I1258;
    struct futq_info * I1260;
    U  I1261;
    U  I1262;
    U  I1263;
    U  I1264;
    U  I1265;
    U  I1266;
    U  I1267;
    struct millenium * I1268;
    EBLK  * I1270;
    EBLK  * I1271;
    EBLK  * I1272;
    EBLK  * I1273;
    EBLK  * I1274;
    EBLK  * I1275;
    EBLK  * I1276;
    EBLK  * I1277;
    EBLK  * I1278;
    EBLK  * I1279;
    EBLK  * I1280;
    EBLK  * I1281;
    EBLK  * I1282;
    EBLK  * I1283;
    EBLK  * I1284;
    EBLK  * I1285;
    EBLK  * I1286;
    MPS  * I1287;
    struct retain_t * I1288;
    EBLK  * I1289;
    EBLK  * I1290;
    EBLK  * I1291;
    EBLK  * I1292;
    EBLK  * I1293;
    EBLK  * I1294;
    EBLK  * I1295;
    EBLK  * I1296;
    EBLK  * I1297;
    EBLK  * I1298;
    EBLK  * I1299;
    EBLK  * I1300;
    EBLK  * I1301;
    EBLK  * I1302;
    EBLK  * I1303;
    EBLK  * I1304;
    EBLK  * I1305;
    EBLK  * I1306;
    EBLK  * I1307;
    EBLK  * I1308;
    EBLK  * I1309;
    EBLK  * I1310;
    EBLK  * I1311;
    EBLK  * I1312;
    EBLK  * I1313;
    EBLK  * I1314;
    EBLK  I1315;
    EBLK  * I1316;
    EBLK  * I1317;
    int I1318;
    struct vcs_globals_t * I1319;
    clock_struct  I1321;
    unsigned long long I1322;
    EBLK  * I1323;
    EBLK  * I1324;
    void * I1325;
    U  semilerOptQueuesFlag;
    U  I1327;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPDP)(void *  , void *  , scalar   );
typedef void (* FPVDP)(void *  , void *  , void *  );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    int I1328;
    struct _lqueue * I799;
    EBLK  * I1330;
    EBLK  * I752;
    DEblkPoolT  * I774;
} Queue;
typedef struct {
    void * I1331;
    void * I1332;
    void * I1333[2];
    void * I1334;
} ClkLevel;
typedef struct {
    unsigned long long I1335;
    EBLK  I1238;
    U  I1336;
    U  I1337;
    union {
        void * pHeap;
        Queue  * pList;
    } I721;
    unsigned long long I1338;
    ClkLevel  I1339;
    Queue   I1340[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern __thread unsigned long long vcs_clocks;
extern __thread unsigned long long ref_vcs_clocks;
extern UB   Xunion[];
extern UB   vcsXunionCg[];
extern UB   vcsXworCg[];
extern UB   vcsXwandCg[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   bepatsFunctionArray[];
extern FP   rmaFunctionArray[];
extern UP   rmaFunctionRtlArray[];
extern UP   rmaFunctionHsRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern FP   rmaFunctionFanoutArray[];
extern __thread UB  dummyScalar;
extern __thread UB  fScalarIsForced;
extern __thread UB  fScalarIsReleased;
extern __thread UB  fScalarIsDeposited;
extern U  fNotimingchecks;
extern U  fFsdbDumpOn;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern UB   rmaposEdgeStatusArray[];
extern UB   rmanegEdgeStatusArray[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedNativeVcCgFnPtr;
extern U  VCS_NCBK_Enabled;
extern UB  * ptableGbl;
extern U  * vcs_ptableOffsetsGbl;
extern UB  * expandedClkValues;
extern __thread Qhdr  * lvlQueue;
extern __thread unsigned threadIndex;
extern int cPeblkThreads;
extern US   xedges[];
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern U  fFutEventPRL;
extern U  fParallelEBLK;
extern U  fBufferingEvent;
extern __thread UB  fNettypeIsForced;
extern __thread UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fHashTableSize;
extern U  fSkipStrChangeOnDelay;
extern U  fHsimTcheckOpt;
extern U  fHsimRuntimeSdfOpt;
extern U  fSkipMpTsUpdateOnStr;
extern scalar   edgeChangeLookUp[4][4];
extern U  fDoingTime0Prop;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;
extern U  rmaProfEvtProp;
extern U  semilerOptQueuesFlag;
extern int semilerOpt;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void hsimDispatchDACbkMemOptNoDynElabS(RP* p, U val, UB* da_byte, U isStrength);
extern U slaveTogglesThisTime;
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void doMpdCommon(MPS* pmps);
extern TimeStamp GET_DIFF_DELAY_FUNC(TimeStamp ts);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(EBLK *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, EBLK *e);
extern void FsdbReportClkGlitch(UB*,U);
extern void AddToClkGLitchArray(EBLK*);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void vcs_sched0sd_hsim_udpclk(UB* peblk);
extern void vcs_sched0sd_hsim_udpclkopt(UB* peblk);
extern void sched0sd_hsim_PRL(UB* peblk);
extern void sched0lq_parallel_clk(EBLK* peblk);
extern U    isRtlClockScheduled(EBLK* peblk);
extern void doFgpRaceCheck(UB* pcode, UB* p, U flag);
extern void doSanityLvlCheck();
extern void sched0lq_parallel_ova(EBLK* peblk);
extern void sched0lq_parallel_ova_precheck(EBLK* peblk);
extern void rmaDlpEvalSeqPrim(UB* peblk, UB val, UB preval);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void appendTransEventS(RmaTransEventHdr* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimCountXEdges(void* record,  scalar s);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEventIC(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset, U gd_info, U encodeInPcode, void* propValue);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void *VCSCalloc(size_t size, size_t count);
extern void *VCSMalloc(size_t size);
extern void VCSFree(void *ptr);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaSetWInW(vec32* dst, vec32* src, U index, U indexSrc, U width);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip, U offset);
extern void vcs_updateHsimFunc(void* ip, U offset);
extern void unsetHsimFunc(void* ip);
extern U fProfEvtProp;
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsW(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusW(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void levelInsertQueueGL(int);
extern void VcsRciRtl(RP pcode);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvalRtlEdgeLoads(RmaRtlEdgeBlockHdr *phdr, US clkEdge, scalar clkVal, scalar prevClkVal, scalar val4,   scalar prevval4, scalar master4val);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoadNew(UB* p, US* ea, U flags, UB* plist, UB* pprevlist, scalar v, scalar pv);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U flags, UB* plist, UB* pprevlist, scalar v);
extern void vcsCheckIfClkValValid(U val, U index);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void rmaRecordEvents(HsimNodeRecord *pnr);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void HDLCosimProcessDUTInputChange(U inputId, void* val);
extern void rmaChangeListForMovedGates(UB clkVal, UB f10Edge, UB* subMasterVal, UB* plist, RP* p, U count);
extern void rmaEvalSeqPrimLoadsByteArray(UB* pcode, UB val, UB prevval4);
extern void rmaEvalSeqPrimLoadsByteArrayX(UB* pcode, UB val, UB prevval4);
extern void vcsRmaEvalSeqPrimLoadsByteArraySCT(UB* pcode, UB val, UB prevval4, U c);
extern void vcsAbortForBadEBlk(void);
extern scalar edgeChangeLookUp[4][4];
extern void Wsvvar_sched_virt_intf_eval(RP* ptr, char val);
extern void vcs_hwcosim_drive_dut_scalar(U id, char val);
extern void vcs_hwcosim_drive_dut_vector_4state(U id, vec32* val);
extern U vcs_rmaGetClkValForSeqUdpLayoutOnClkOpt(UB* poutput);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
#if !defined(__aarch64__)
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
#else
    out = ffs(in) - 1;
#endif
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hs_0_M_0_0__simv_daidir (UB  * pcode, vec32  * I1056, U  I954);
void  hs_0_M_1_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_1_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_1_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_2_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_2_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_2_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_3_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_3_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_4_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_4_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_5_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_5_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_5_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_6_0__simv_daidir (UB  * pcode, vec32  * I1056, U  I954);
void  hs_0_M_7_21__simv_daidir (UB  * pcode, vec32  * I1056, U  I954);
void  hs_0_M_7_0__simv_daidir (UB  * pcode, vec32  * I1056, U  I954);
void  hs_0_M_7_5__simv_daidir (UB  * pcode, U  I954);
void  hs_0_M_8_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_8_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_9_21__simv_daidir (UB  * pcode, vec32  * I1056, U  I954);
void  hs_0_M_9_0__simv_daidir (UB  * pcode, vec32  * I1056, U  I954);
void  hs_0_M_9_5__simv_daidir (UB  * pcode, U  I954);
void  hs_0_M_10_21__simv_daidir (UB  * pcode, vec32  * I1056, U  I954);
void  hs_0_M_10_0__simv_daidir (UB  * pcode, vec32  * I1056, U  I954);
void  hs_0_M_10_5__simv_daidir (UB  * pcode, U  I954);
void  hs_0_M_11_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_11_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_11_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_12_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_12_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_12_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_13_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_13_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_13_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_14_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_14_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_14_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_15_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_15_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_15_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_16_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_16_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_16_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_16_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_17_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_18_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_19_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_19_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_19_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_20_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_20_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_20_11__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_21_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_22_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_23_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_23_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_23_11__simv_daidir (UB  * pcode, scalar  val);
void  hsG_0__0 (struct dummyq_struct * I1353, EBLK  * I1348, U  I707);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

